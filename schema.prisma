generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id        BigInt   @id @default(autoincrement())
  firstName String   @db.VarChar(100)
  lastName  String   @db.VarChar(100)
  phone     String   @unique @db.VarChar(20)
  address   String?  @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  user_id   String   @unique @db.Uuid
  Booking   Booking[]

  @@map("users_farmerprofile")
}

model Operator {
  id           BigInt   @id @default(autoincrement())
  firstName    String   @db.VarChar(100)
  lastName     String   @db.VarChar(100)
  phone        String   @unique @db.VarChar(20)
  businessName String?  @db.VarChar(255)
  address      String?  @db.VarChar(255)
  createdAt    DateTime @db.Timestamptz(6)
  updatedAt    DateTime @db.Timestamptz(6)
  user_id      String   @unique @db.Uuid
  Facility     Facility[]

  @@index([phone], map: "users_operatorprofile_phone_e174896f_like")
  @@map("users_operatorprofile")
}

model auth_group {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(150)

  @@index([name], map: "auth_group_name_a6ea08ec_like")
}

model auth_group_permissions {
  id            BigInt @id @default(autoincrement())
  group_id      Int
  permission_id Int

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], map: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], map: "auth_group_permissions_permission_id_84c5c92e")
}

model auth_permission {
  id              Int    @id @default(autoincrement())
  name            String @db.VarChar(255)
  content_type_id Int
  codename        String @db.VarChar(100)

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], map: "auth_permission_content_type_id_2f476e4b")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model django_admin_log {
  id              Int      @id @default(autoincrement())
  action_time     DateTime @db.Timestamptz(6)
  object_id       String?
  object_repr     String   @db.VarChar(200)
  action_flag     Int      @db.SmallInt
  change_message  String
  content_type_id Int?
  user_id         String   @db.Uuid

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6")
}

model django_content_type {
  id        Int    @id @default(autoincrement())
  app_label String @db.VarChar(100)
  model     String @db.VarChar(100)

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
  @@index([session_key], map: "django_session_session_key_c0390e0f_like")
}

model token_blacklist_blacklistedtoken {
  id             BigInt   @id @default(autoincrement())
  blacklisted_at DateTime @db.Timestamptz(6)
  token_id       BigInt   @unique
}

model token_blacklist_outstandingtoken {
  id         BigInt    @id @default(autoincrement())
  token      String
  created_at DateTime? @db.Timestamptz(6)
  expires_at DateTime  @db.Timestamptz(6)
  user_id    String?   @db.Uuid
  jti        String    @unique(map: "token_blacklist_outstandingtoken_jti_hex_d9bdf6f7_uniq") @db.VarChar(255)

  @@index([jti], map: "token_blacklist_outstandingtoken_jti_hex_d9bdf6f7_like")
  @@index([user_id], map: "token_blacklist_outstandingtoken_user_id_83bc629a")
}

model users_otp {
  id         BigInt   @id @default(autoincrement())
  code       String   @db.VarChar(6)
  created_at DateTime @db.Timestamptz(6)
  is_used    Boolean
  user_id    String   @db.Uuid

  @@index([user_id], map: "users_otp_user_id_cd09ace3")
}

model users_user {
  password               String    @db.VarChar(128)
  last_login             DateTime? @db.Timestamptz(6)
  id                     String    @id @db.Uuid
  email                  String    @unique @db.VarChar(254)
  role                   String    @db.VarChar(10)
  is_active              Boolean
  is_staff               Boolean
  is_superuser           Boolean
  emailVerificationToken String?   @db.Uuid
  emailTokenExpires      DateTime? @db.Timestamptz(6)
  emailVerified          Boolean
  passwordResetToken     String?   @db.Uuid
  passwordTokenExpires   DateTime? @db.Timestamptz(6)
  createdAt              DateTime  @db.Timestamptz(6)
  updatedAt              DateTime  @db.Timestamptz(6)
  is_verified            Boolean

  @@index([email], map: "users_user_email_243f6e77_like")
  @@index([role], map: "users_user_role_b76f4c51")
  @@index([role], map: "users_user_role_b76f4c51_like")
}

model users_user_groups {
  id       BigInt @id @default(autoincrement())
  user_id  String @db.Uuid
  group_id Int

  @@unique([user_id, group_id], map: "users_user_groups_user_id_group_id_b88eab82_uniq")
  @@index([group_id], map: "users_user_groups_group_id_9afc8d0e")
  @@index([user_id], map: "users_user_groups_user_id_5f6f5a90")
}

model users_user_user_permissions {
  id            BigInt @id @default(autoincrement())
  user_id       String @db.Uuid
  permission_id Int

  @@unique([user_id, permission_id], map: "users_user_user_permissions_user_id_permission_id_43338c45_uniq")
  @@index([permission_id], map: "users_user_user_permissions_permission_id_0b93982e")
  @@index([user_id], map: "users_user_user_permissions_user_id_20aca447")
}

enum FacilityType {
  DRYER
  STORAGE
  PROCESSING
  OTHER
}

enum UserRole {
  FARMER
  OPERATOR
  ADMIN
}

enum TransactionDescription {
  BOOKING
  EXTENSION
  PENALTY
  OTHER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Facility {
  id          BigInt     @id @default(autoincrement())
  operatorId  BigInt
  operator    Operator   @relation(fields: [operatorId], references: [id])
  location    String
  pricePerDay Float
  type        FacilityType
  available   Boolean    @default(true)
  capacity    Int        @default(0)
  contact     String
  description String?
  bookings    Booking[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Booking {
  id            BigInt    @id @default(autoincrement())
  facilityId    BigInt
  facility      Facility   @relation(fields: [facilityId], references: [id])
  farmerId      BigInt
  farmer        Farmer     @relation(fields: [farmerId], references: [id])
  amount        Float
  paid          Boolean    @default(false)
  active        Boolean    @default(false)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  transactions  Transaction[]
}

model Transaction {
  id            BigInt    @id @default(autoincrement())
  bookingId     BigInt            @unique
  booking       Booking           @relation(fields: [bookingId], references: [id])
  description   TransactionDescription
  paymentMethod String
  amount        Float
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}
